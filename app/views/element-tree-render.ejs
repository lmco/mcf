<%
// Set uid, name, and type
const uid = root.element.uid;
const name = root.element.name;
const type = root.element.type.toLowerCase();
const apiRef = root.element.apiRef;

// Set Icon
let icon = null;
if (type === 'package') {
  icon = 'fas fa-boxes'
}
else if (type === 'relationship') {
  icon = 'fas fa-exchange-alt'
}
else {
  icon = 'fas fa-box'
}

const parentRef = (root.element.parent) ? `${root.element.parent.uid}-child` : ''
const childRef = (root.hasOwnProperty('children')) ? `${root.element.uid}-child` : ''
const closed = (root.element.parent) ? 'closed' : ''
 %>

<div class="element type-<%= type %> <%= uid %> <%= parentRef %> <%= closed %>">
  <div class="element-container">

    <% if (type === 'package') { %>
    <a class="dropdown-icon"onclick=toggleClosed("<%= childRef %>")>
      <i class="fas fa-angle-right <%= childRef %>"></i>
      <i class="fas fa-angle-down <%= childRef %> closed"></i>
    </a>
    <% } %>
    <a id="<%= apiRef %>" class="element-title">
      <i class="<%= icon %>"></i>
      <span><%= name %></span>
    </a>
  </div>

    <%
    if (root.hasOwnProperty('children') && root.children.length > 0) {
      for (let i = 0; i < root.children.length; i++) {
        let child = root.children[i];
    %>
    <%- include('element-tree-render', {root: child}) %>
    <%
      }
    }
    %>


</div>
